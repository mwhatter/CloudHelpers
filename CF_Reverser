import json
import boto3
import re
import logging
import base64

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize Boto3 clients
ec2 = boto3.client('ec2')
elb = boto3.client('elb')
rds = boto3.client('rds')
s3 = boto3.client('s3')
workspaces = boto3.client('workspaces')
elbv2 = boto3.client('elbv2')
lambda_client = boto3.client('lambda')
dynamodb = boto3.client('dynamodb')

# Helper functions to fetch AWS resources
def get_vpcs():
    logger.info("Fetching VPCs")
    return ec2.describe_vpcs()['Vpcs']

def get_subnets(vpc_id):
    logger.info(f"Fetching subnets for VPC {vpc_id}")
    return ec2.describe_subnets(Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}])['Subnets']

def get_security_groups(vpc_id):
    logger.info(f"Fetching security groups for VPC {vpc_id}")
    return ec2.describe_security_groups(Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}])['SecurityGroups']

def get_ec2_instances(vpc_id):
    logger.info(f"Fetching EC2 instances for VPC {vpc_id}")
    return ec2.describe_instances(Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}])['Reservations']

def get_nat_gateways(vpc_id):
    logger.info(f"Fetching NAT gateways for VPC {vpc_id}")
    return ec2.describe_nat_gateways(Filter=[{'Name': 'vpc-id', 'Values': [vpc_id]}])['NatGateways']

def get_route_tables(vpc_id):
    logger.info(f"Fetching route tables for VPC {vpc_id}")
    return ec2.describe_route_tables(Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}])['RouteTables']

def get_network_acls(vpc_id):
    logger.info(f"Fetching network ACLs for VPC {vpc_id}")
    return ec2.describe_network_acls(Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}])['NetworkAcls']

def sanitize_name(name):
    logger.info(f"Sanitizing name: {name}")
    return re.sub(r'[^a-zA-Z0-9]', '', name)

def get_user_data(instance_id):
    try:
        response = ec2.describe_instance_attribute(InstanceId=instance_id, Attribute='userData')
        user_data = response.get('UserData')
        if user_data and 'Value' in user_data:
            return base64.b64encode(user_data['Value'].encode('utf-8')).decode('utf-8')
    except Exception as e:
        logger.error(f"Error fetching user data for instance {instance_id}: {str(e)}")
    return None

def get_workspace_instances():
    logger.info("Fetching WorkSpaces instances")
    return workspaces.describe_workspaces()['Workspaces']

def get_vpc_peering_connections():
    logger.info("Fetching VPC peering connections")
    return ec2.describe_vpc_peering_connections()['VpcPeeringConnections']
    
def get_elbs():
    logger.info("Fetching Elastic Load Balancers")
    try:
        response = elb.describe_load_balancers()
        return response['LoadBalancerDescriptions']
    except Exception as e:
        logger.error(f"Error fetching ELBs: {str(e)}")
        return []

def get_rds_instances():
    logger.info("Fetching RDS instances")
    try:
        response = rds.describe_db_instances()
        return response['DBInstances']
    except Exception as e:
        logger.error(f"Error fetching RDS instances: {str(e)}")
        return []

def get_s3_buckets():
    logger.info("Fetching S3 buckets")
    try:
        response = s3.list_buckets()
        return response['Buckets']
    except Exception as e:
        logger.error(f"Error fetching S3 buckets: {str(e)}")
        return []
        
def get_elbv2_load_balancers():
    logger.info("Fetching ELBv2 Load Balancers")
    try:
        response = elbv2.describe_load_balancers()
        return response['LoadBalancers']
    except Exception as e:
        logger.error(f"Error fetching ELBv2 Load Balancers: {str(e)}")
        return []

def get_lambda_functions():
    logger.info("Fetching Lambda functions")
    try:
        response = lambda_client.list_functions()
        return response['Functions']
    except Exception as e:
        logger.error(f"Error fetching Lambda functions: {str(e)}")
        return []

def get_dynamodb_tables():
    logger.info("Fetching DynamoDB tables")
    try:
        response = dynamodb.list_tables()
        return response['TableNames']
    except Exception as e:
        logger.error(f"Error fetching DynamoDB tables: {str(e)}")
        return []


# CloudFormation resource functions for VPCs, Subnets, Security Groups, EC2 Instances, etc.
def cloudformation_vpc(vpc):
    vpc_resource_name = sanitize_name(vpc['VpcId'])
    return {
        'Type': 'AWS::EC2::VPC',
        'Properties': {
            'CidrBlock': vpc['CidrBlock'],
            'Tags': [{'Key': tag['Key'], 'Value': tag['Value']} for tag in vpc.get('Tags', [])]
        }
    }

def cloudformation_subnet(subnet, vpc_resource_name):
    subnet_resource_name = sanitize_name(subnet['SubnetId'])
    return {
        'Type': 'AWS::EC2::Subnet',
        'Properties': {
            'VpcId': {'Ref': vpc_resource_name},
            'CidrBlock': subnet['CidrBlock'],
            'AvailabilityZone': subnet['AvailabilityZone'],
            'Tags': [{'Key': tag['Key'], 'Value': tag['Value']} for tag in subnet.get('Tags', [])]
        }
    }

def cloudformation_security_group(sg, vpc_resource_name):
    sg_resource_name = sanitize_name(sg['GroupId'])
    return {
        'Type': 'AWS::EC2::SecurityGroup',
        'Properties': {
            'VpcId': {'Ref': vpc_resource_name},
            'GroupName': sg['GroupName'],
            'GroupDescription': sg['Description'],
            'Tags': [{'Key': tag['Key'], 'Value': tag['Value']} for tag in sg.get('Tags', [])]
        }
    }

def cloudformation_ec2_instance(instance):
    instance_resource_name = sanitize_name(instance['InstanceId'])
    user_data = get_user_data(instance['InstanceId'])
    properties = {
        'InstanceType': instance['InstanceType'],
        'ImageId': instance['ImageId'],
        'UserData': user_data,
        'Tags': [{'Key': tag['Key'], 'Value': tag['Value']} for tag in instance.get('Tags', [])]
    }
    if 'SubnetId' in instance:
        properties['SubnetId'] = {'Ref': sanitize_name(instance['SubnetId'])}
    return {
        'Type': 'AWS::EC2::Instance',
        'Properties': properties
    }

def cloudformation_workspace_instance(workspace):
    workspace_resource_name = sanitize_name(workspace['WorkspaceId'])
    return {
        'Type': 'AWS::WorkSpaces::Workspace',
        'Properties': {
            'DirectoryId': workspace['DirectoryId'],
            'BundleId': workspace['BundleId'],
            'UserName': workspace['UserName'],
            'RootVolumeEncryptionEnabled': False,  
            'UserVolumeEncryptionEnabled': False,  
            'VolumeEncryptionKey': '',  
            'Tags': [{'Key': tag['Key'], 'Value': tag['Value']} for tag in workspace.get('Tags', [])]
        }
    }

def cloudformation_vpc_peering_connection(vpc_peering):
    peering_resource_name = sanitize_name(vpc_peering['VpcPeeringConnectionId'])
    return {
        'Type': 'AWS::EC2::VPCPeeringConnection',
        'Properties': {
            'PeerVpcId': vpc_peering['AccepterVpcInfo']['VpcId'],
            'VpcId': vpc_peering['RequesterVpcInfo']['VpcId'],
            'PeerOwnerId': '',  
            'PeerRegion': '',  
            'Tags': [{'Key': 'Name', 'Value': peering_resource_name}] 
        }
    }
	
# CloudFormation resource function for ELB
def cloudformation_elb(elb_description):
    elb_resource_name = sanitize_name(elb_description['LoadBalancerName'])
    listeners = [{
        'LoadBalancerPort': listener['Listener']['LoadBalancerPort'],
        'InstancePort': listener['Listener']['InstancePort'],
        'Protocol': listener['Listener']['Protocol'],
    } for listener in elb_description['ListenerDescriptions']]

    return {
        'Type': 'AWS::ElasticLoadBalancing::LoadBalancer',
        'Properties': {
            'LoadBalancerName': elb_description['LoadBalancerName'],
            'Listeners': listeners,
            'HealthCheck': {
                'Target': elb_description['HealthCheck']['Target'],
                'HealthyThreshold': str(elb_description['HealthCheck']['HealthyThreshold']),
                'UnhealthyThreshold': str(elb_description['HealthCheck']['UnhealthyThreshold']),
                'Interval': str(elb_description['HealthCheck']['Interval']),
                'Timeout': str(elb_description['HealthCheck']['Timeout'])
            },
            'Subnets': elb_description.get('Subnets', []),
            'SecurityGroups': elb_description.get('SecurityGroups', []),
            'Tags': [{'Key': tag['Key'], 'Value': tag['Value']} for tag in elb_description.get('Tags', [])]
        }
    }

# CloudFormation resource function for RDS
def cloudformation_rds_instance(rds_instance):
    rds_resource_name = sanitize_name(rds_instance['DBInstanceIdentifier'])
    
    return {
        'Type': 'AWS::RDS::DBInstance',
        'Properties': {
            'DBInstanceIdentifier': rds_instance['DBInstanceIdentifier'],
            'AllocatedStorage': str(rds_instance['AllocatedStorage']),
            'DBInstanceClass': rds_instance['DBInstanceClass'],
            'Engine': rds_instance['Engine'],
            'MasterUsername': rds_instance['MasterUsername'],
            'MasterUserPassword': 'REPLACE_WITH_PASSWORD',
            'DBSubnetGroupName': rds_instance.get('DBSubnetGroup', {}).get('DBSubnetGroupName', ''),
            'VPCSecurityGroups': [sg['VpcSecurityGroupId'] for sg in rds_instance.get('VpcSecurityGroups', [])],
            'Tags': [{'Key': tag['Key'], 'Value': tag['Value']} for tag in rds_instance.get('TagList', [])]
        }
    }

# CloudFormation resource function for S3
def cloudformation_s3_bucket(bucket):
    bucket_resource_name = sanitize_name(bucket['Name'])

    return {
        'Type': 'AWS::S3::Bucket',
        'Properties': {
            'BucketName': bucket['Name'],
            'VersioningConfiguration': {
                'Status': 'Enabled'
            },
            'LoggingConfiguration': {
                'DestinationBucketName': 'my-logging-bucket',
                'LogFilePrefix': f'logs/{bucket["Name"]}/'
            },
            'AccessControl': 'Private',
            'CorsConfiguration': {
                'CorsRules': [
                    {
                        'AllowedHeaders': ['*'],
                        'AllowedMethods': ['GET', 'PUT'],
                        'AllowedOrigins': ['http://www.example.com'],
                        'ExposedHeaders': ['x-amz-server-side-encryption'],
                        'MaxAge': 3000
                    }
                ]
            },
        }
    }

def cloudformation_elbv2(lb):
    lb_resource_name = sanitize_name(lb['LoadBalancerName'])
    return {
        'Type': 'AWS::ElasticLoadBalancingV2::LoadBalancer',
        'Properties': {
            'Name': lb['LoadBalancerName'],
            'Type': lb['Type'],
            'Subnets': lb.get('Subnets', []),
            'Scheme': lb.get('Scheme', 'internet-facing'),
            'SecurityGroups': lb.get('SecurityGroups', []),
            'IpAddressType': lb.get('IpAddressType', 'ipv4'),
            'LoadBalancerAttributes': [
                {'Key': 'access_logs.s3.enabled', 'Value': 'false'},
            ],
            'Tags': [{'Key': tag['Key'], 'Value': tag['Value']} for tag in lb.get('Tags', [])]
        }
    }

# CloudFormation resource function for AWS Lambda
def cloudformation_lambda(func):
    func_resource_name = sanitize_name(func['FunctionName'])
    # Detailed properties
    return {
        'Type': 'AWS::Lambda::Function',
        'Properties': {
            'FunctionName': func['FunctionName'],
            'Runtime': func['Runtime'],
            'Role': func['Role'],
            'Handler': func['Handler'],
            'Code': {
                'S3Bucket': 'your-lambda-functions-bucket',
                'S3Key': f'{func["FunctionName"]}.zip'
            },
            'Environment': {
                'Variables': {
                    'EXAMPLE_VARIABLE': 'example_value'
                }
            },
        }
    }

# CloudFormation resource function for DynamoDB Table
def cloudformation_dynamodb_table(table_name):
    # Detailed properties; adjust according to your table's configuration
    return {
        'Type': 'AWS::DynamoDB::Table',
        'Properties': {
            'TableName': table_name,
            'AttributeDefinitions': [
                {
                    'AttributeName': 'id',
                    'AttributeType': 'S'
                },
            ],
            'KeySchema': [
                {
                    'AttributeName': 'id',
                    'KeyType': 'HASH'
                },
            ],
            'BillingMode': 'PAY_PER_REQUEST',
        }
    }

def lambda_handler(event, context):
    cf_template = {
        'AWSTemplateFormatVersion': '2010-09-09',
        'Resources': {}
    }

    # Process each AWS service and add to the CloudFormation template
    try:
        for vpc in get_vpcs():
            vpc_resource_name = sanitize_name(vpc['VpcId'])
            cf_template['Resources'][vpc_resource_name] = cloudformation_vpc(vpc)

            for subnet in get_subnets(vpc['VpcId']):
                subnet_resource_name = sanitize_name(subnet['SubnetId'])
                cf_template['Resources'][subnet_resource_name] = cloudformation_subnet(subnet, vpc_resource_name)

            for sg in get_security_groups(vpc['VpcId']):
                sg_resource_name = sanitize_name(sg['GroupId'])
                cf_template['Resources'][sg_resource_name] = cloudformation_security_group(sg, vpc_resource_name)

            for reservation in get_ec2_instances(vpc['VpcId']):
                for instance in reservation['Instances']:
                    instance_resource_name = sanitize_name(instance['InstanceId'])
                    cf_template['Resources'][instance_resource_name] = cloudformation_ec2_instance(instance)
    except Exception as e:
        logger.error(f"Error processing VPCs and their related resources: {str(e)}")

    try:
        for elb_description in get_elbs():
            elb_resource_name = sanitize_name(elb_description['LoadBalancerName'])
            cf_template['Resources'][elb_resource_name] = cloudformation_elb(elb_description)
    except Exception as e:
        logger.error(f"Error processing ELBs: {str(e)}")

    try:
        for rds_instance in get_rds_instances():
            rds_resource_name = sanitize_name(rds_instance['DBInstanceIdentifier'])
            cf_template['Resources'][rds_resource_name] = cloudformation_rds_instance(rds_instance)
    except Exception as e:
        logger.error(f"Error processing RDS instances: {str(e)}")

    try:
        for bucket in get_s3_buckets():
            bucket_resource_name = sanitize_name(bucket['Name'])
            cf_template['Resources'][bucket_resource_name] = cloudformation_s3_bucket(bucket)
    except Exception as e:
        logger.error(f"Error processing S3 buckets: {str(e)}")

    try:
        for workspace in get_workspace_instances():
            workspace_resource_name = sanitize_name(workspace['WorkspaceId'])
            cf_template['Resources'][workspace_resource_name] = cloudformation_workspace_instance(workspace)
    except Exception as e:
        logger.error(f"Error processing WorkSpaces instances: {str(e)}")

    try:
        for vpc_peering in get_vpc_peering_connections():
            peering_resource_name = sanitize_name(vpc_peering['VpcPeeringConnectionId'])
            cf_template['Resources'][peering_resource_name] = cloudformation_vpc_peering_connection(vpc_peering)
    except Exception as e:
        logger.error(f"Error processing VPC Peering Connections: {str(e)}")

    try:
        for lb in get_elbv2_load_balancers():
            lb_resource_name = sanitize_name(lb['LoadBalancerName'])
            cf_template['Resources'][lb_resource_name] = cloudformation_elbv2(lb)
    except Exception as e:
        logger.error(f"Error processing ELBv2 Load Balancers: {str(e)}")

    try:
        for func in get_lambda_functions():
            func_resource_name = sanitize_name(func['FunctionName'])
            cf_template['Resources'][func_resource_name] = cloudformation_lambda(func)
    except Exception as e:
        logger.error(f"Error processing Lambda functions: {str(e)}")

    try:
        for table_name in get_dynamodb_tables():
            table_resource_name = sanitize_name(table_name)
            cf_template['Resources'][table_resource_name] = cloudformation_dynamodb_table(table_name)
    except Exception as e:
        logger.error(f"Error processing DynamoDB tables: {str(e)}")

    logger.info(f"CloudFormation Template: {json.dumps(cf_template, indent=4)}")
    return json.dumps(cf_template, indent=4)

if __name__ == "__main__":
    cloudformation_template = lambda_handler(None, None)
    print(cloudformation_template)
